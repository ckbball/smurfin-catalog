// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: catalog.proto

package catalog

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CatalogService service

type CatalogService interface {
	FindItems(ctx context.Context, in *Specification, opts ...client.CallOption) (*Response, error)
	Create(ctx context.Context, in *Item, opts ...client.CallOption) (*Response, error)
	RemoveItem(ctx context.Context, in *Specification, opts ...client.CallOption) (*Response, error)
	ListItems(ctx context.Context, in *ListSpecification, opts ...client.CallOption) (*Response, error)
}

type catalogService struct {
	c    client.Client
	name string
}

func NewCatalogService(name string, c client.Client) CatalogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "catalog"
	}
	return &catalogService{
		c:    c,
		name: name,
	}
}

func (c *catalogService) FindItems(ctx context.Context, in *Specification, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CatalogService.FindItems", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) Create(ctx context.Context, in *Item, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CatalogService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) RemoveItem(ctx context.Context, in *Specification, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CatalogService.RemoveItem", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) ListItems(ctx context.Context, in *ListSpecification, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CatalogService.ListItems", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CatalogService service

type CatalogServiceHandler interface {
	FindItems(context.Context, *Specification, *Response) error
	Create(context.Context, *Item, *Response) error
	RemoveItem(context.Context, *Specification, *Response) error
	ListItems(context.Context, *ListSpecification, *Response) error
}

func RegisterCatalogServiceHandler(s server.Server, hdlr CatalogServiceHandler, opts ...server.HandlerOption) error {
	type catalogService interface {
		FindItems(ctx context.Context, in *Specification, out *Response) error
		Create(ctx context.Context, in *Item, out *Response) error
		RemoveItem(ctx context.Context, in *Specification, out *Response) error
		ListItems(ctx context.Context, in *ListSpecification, out *Response) error
	}
	type CatalogService struct {
		catalogService
	}
	h := &catalogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CatalogService{h}, opts...))
}

type catalogServiceHandler struct {
	CatalogServiceHandler
}

func (h *catalogServiceHandler) FindItems(ctx context.Context, in *Specification, out *Response) error {
	return h.CatalogServiceHandler.FindItems(ctx, in, out)
}

func (h *catalogServiceHandler) Create(ctx context.Context, in *Item, out *Response) error {
	return h.CatalogServiceHandler.Create(ctx, in, out)
}

func (h *catalogServiceHandler) RemoveItem(ctx context.Context, in *Specification, out *Response) error {
	return h.CatalogServiceHandler.RemoveItem(ctx, in, out)
}

func (h *catalogServiceHandler) ListItems(ctx context.Context, in *ListSpecification, out *Response) error {
	return h.CatalogServiceHandler.ListItems(ctx, in, out)
}
